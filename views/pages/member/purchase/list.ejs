<!DOCTYPE html>
<html>
  <head>
    <%- include(__base + 'views/partials/head.ejs', { title: "PR System" }) %>
  </head>
  <body>

    <!-- Navbar -->
    <%- include(__base + 'views/partials/navbar-login.ejs') %>
    <header>
      <h1 class="title"> LIST OF PURCHASES </h1>
      <div class="container-fluid">
        <% if (locals.fields) { %>
          <input type="text" class="form-control" name="search" id="search" placeholder="Search...">
          <% for(field in fields) { %> 
            <div class="search-filter-container">
              <input type="checkbox" class="search-filter" name="<%- field %>" id="search-<%- field %>" >
              <label for="search-<%- field %>"><%- fields[field] %></label>
            </div>
          <% } %>
          <br>
          <button class="btn btn-success" onclick="selectAllFilters()">Select All Filters</button>
          <button class="btn btn-danger" onclick="deselectAllFilters()">Deselect All Filters</button>
          <button class="btn btn-primary mt-4" style="width: 100%; margin-top: 5px" onclick="searchWithFilters()">Search</button>
          <br>
        <% } %>
        <ul class="list-group black-text" id="purchases">
        </ul>
        <li class="no-results-indicator" style="display: none;">
          <h4 class="text-center text-danger"><b>No results</b></p>
          <br>
        </li>
      </div>
    </header>

    
    <script>
      function showNoResults() {
        document.querySelector(".no-results-indicator").style.display = "block";
      }

      function hideNoResults() {
        document.querySelector(".no-results-indicator").style.display = "none";
      }

      function selectAllFilters() {
        let fields = document.querySelectorAll(".search-filter");
        for(let i = 0; i < fields.length; i++) {
          fields[i].checked = true;
        }
      }
      function deselectAllFilters() {
        let fields = document.querySelectorAll(".search-filter");
        for(let i = 0; i < fields.length; i++) {
          fields[i].checked = false;
        }
      }

      selectAllFilters();

      $("#search").on('keyup', function(e) {
        if (e.key === 'Enter' || e.keyCode === 13) {
          searchWithFilters();
        }
      });

      function searchWithFilters() {
        hideNoResults();
        if(document.getElementById("search").value == "") {
          let allPurchases = document.querySelectorAll(".list-group-item");
          for(i = 0; i < allPurchases.length; i++) {
            allPurchases[i].style.display = "block";
          }
        } else {
          let fields = document.querySelectorAll(".search-filter");
          let selectedFields = [];
          for (i = 0; i < fields.length; i++) {
            if(fields[i].checked) {
              selectedFields.push(fields[i].name);
            }
          }
          $.ajax({
            method: "GET",
            url: `/member/purchase/search_by_keyword?keyword=${encodeURIComponent(document.getElementById("search").value)}&fields=${encodeURIComponent(selectedFields.join(","))}`,
            success: function(data) { 
              console.log(data);
              let allPurchases = document.querySelectorAll(".list-group-item");
              for(i = 0; i < allPurchases.length; i++) {
                allPurchases[i].style.display = "none";
              }
              if (data.length > 0) {
                for(i = 0; i < data.length; i++) {
                  if(document.querySelector(`[data-pr="${data[i]}"]`) != null) {
                    document.querySelector(`[data-pr="${data[i]}"]`).style.display = "block";
                  }
                } 
              } else {
                showNoResults();
              }
            },
            error: function(err1, err2, err3) { console.log(err1, err2, err3); alert(`Error! ${err3}`)  }
          });
        }
      }
      function safeValue(str) {
        return (str === "" || typeof str === "undefined" || str === null ? "N/A" : str)
      }
      function getApprovalStatus(num) {
        switch(num) {
          case -1:
            return "Unfinished"
            break
          case 0:
            return "Awaiting Admin Approval"
            break
          case 1:
            return "Admin Rejected"
            break
          case 2:
            return "Awaiting Mentor Approval"
            break
          case 3:
            return "Mentor Rejected"
            break
          case 4:
            return "Mentor Approved"
            break
          default:
            return "N/A"
            break
        }
      }

      function getSubteam(num) {
        switch(num) {
          case 0:
            return "Mechanical"
            break
          case 1:
            return "Electrical"
            break
          case 2:
            return "Programming"
            break
          case 3:
            return "Operational"
            break
          default:
            return "N/A"
            break
        }
      }

      function getTotalCost(arr1, arr2, num) {
        var sum = 0
        for (var i = 0; i < arr1.length; i++) {
          console.log("arr1[i] =", arr1[i], "; arr2[i] =", arr2[i])
          sum += (!isNaN(parseInt(arr1[i],10))&&!isNaN(parseInt(arr2[i],10)) ? arr1[i]*arr2[i] : 0)
        }
        return sum+(!isNaN(num)&&typeof num !== "undefined" ? num : 0)
      }
      function addToList(purchases) {
        if (!Array.isArray(purchases)) {
          console.error('error: addToList takes an array as a parameter')
          return
        }
        console.log(purchases)
        for (var purchase of purchases) {
          purchase_id = purchase.purchase_id
          console.log(purchase)
          $("#purchases").append(`
            <li class="list-group-item" data-pr="${purchase_id}">
              <h2><b>${(purchase.draft ? "[DRAFT] " : (purchase.edited_after_rejection ? "[EDITED] " : "")) + safeValue(purchase.vendor)}</b></h2>
              <div class="btn-group float-right">
                <a href="view/${purchase_id}" class="btn btn-primary btn-lg">View</a>
                ${((purchase.approval <= 1 && purchase.submitted_by == '<%= auth.info.email %>') ? (`<a href="edit/${purchase_id}" class="btn btn-default btn-lg float-right">Edit</a>`) : '')}
              </div>
              ${(purchase.submitted_by === "<%- auth.loggedin ? auth.info.email : notpossible %>" && !purchase.locked ? `<a href="edit/${purchase_id}" class="btn btn-default btn-lg float-right">Edit</a>` : "")}
              <p><b>Purchase ID:</b> ${safeValue(purchase.purchase_id)}</p>
              <p><b>Submitted By:</b> ${safeValue(purchase.submitted_by)}</p>
              <p><b>Subteam:</b> ${getSubteam(purchase.subteam)}</p>
              <p>
                <b>Approval Status:</b> ${(() => {
                  let span = document.createElement("span");
                  let approvalStatus = purchase.approval;
                  if (approvalStatus === 1 || approvalStatus == 3) {
                    span.classList.add("text-danger");
                  } 
                  if (approvalStatus == 2) {
                    span.classList.add("text-primary");
                  }
                  if (approvalStatus == 4) {
                    span.classList.add("text-success");
                  }
                  span.innerText = getApprovalStatus(approvalStatus);
                  return span.outerHTML;
                })()}
              </p>
              <!-- if mentor approved/rejected, use their comments; otherwise use admin comments -->
              <!-- if there are no comments don't even print the line -->
              ${((purchase.admin_comments || purchase.mentor_comments) ?
                (`<p>${(purchase.approval > 2 ?
                  (`<b>Mentor Comments:</b> ${purchase.mentor_comments}`) :
                  (`<b>Admin Comments:</b> ${purchase.admin_comments}`)
                )}</p>`)
              : '')}
              <h4><b>Total:</b> $${Number(purchase.total_cost).toFixed(2)}</h4>
            </li>`
          )
        }
      }
      function searchForPurchaseRequest(keyword) {
        document.querySelectorAll(".list-group-item").forEach((node) => {
          let innerHTML = node.innerHTML.toLowerCase().replaceAll(/<[^>]*>/g, " ").replaceAll(/\s+/g, " ").trim();
          if(innerHTML.includes(keyword.toLowerCase())) {
            node.style.display = "block";
          } else {
            node.style.display = "none";
          }
        })
      }
      function error() {
        $("#purchases").empty().append('<li class="list-group-item">There was an error</li>')
      }
      $.ajax({
        method: "GET",
        url: '/member/purchase/list_object/<%- (filter ? filter : "") %>',
        success: function(data) { console.log(data); addToList(data) },
        error: function(err1, err2, err3) { console.log(err1, err2, err3); error()  }
      })
    </script>

  </body>
</html>